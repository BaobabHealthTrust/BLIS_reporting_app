<html>
<head>
<style>
  .error{
      color: red;
  }
  .hor-minimalist-b .error{
      position: absolute;
      z-index: 1000;
      
      }
  #h-th{
      margin: 0px !important;
  }

  #sample_1 td{
      background-color: white;
      border-radius: 5px;
  }

  th {
      border: 1px dotted #ccc !important;
  }

  #h-th th{
      border: 0px white !important;
  }
  .action  {
      background-color: white !important;
      border: none !important;
  }

  .btn{
      opacity: 0.76 !important;
  }

  .gray{
      opacity: 0.3 !important;
  }

  .uni{
      min-width: 70px;
  }

  .no-margin{
      margin: 0px !important;
      width: 50% !important;
  }
  #new_category_textbox{
      width: 30%;
  }

  #shield{
      position: absolute;
      z-index: 2000;
      top: 0px;
      left: 0px;
      width: 100%;
      height: 100%;
      background: gray;
      opacity: 0.7;
      display: none;
  }

  #popup{
      position: fixed;
      z-index: 2001;
      left: 25%;
      width: 700px;
      max-width: 700px;
      top: 50px !important;
      height: 700px !important;
      background-color: whitesmoke;
      border: 1.5px solid darkslategray;
      opacity: 1 !important;
      display: none;
  }

  #popup-header{
      background-color: whitesmoke;
      height: 30px;
      font-size: 120%;
      border-radius: 8px;
  }
  #content{
       height: 610px;
       width: 700px;
  }
  #popup-content{
      height: 610px !important;
      width: 700px;
      overflow-y: auto;
      background: white;
  }
  #popup-footer{
      height: 30px;
      background-color: whitesmoke;
      border-top: 1px solid lightgray;
  }

  #table-content{
      margin-top: 5px;
      padding-top:5px;
      width: 100%
  }
  .row_even, .row_odd{
      width: 100% !important;
  }
  .labell, .value{
      height: 35px;
      width: 50% !important;
      vertical-align: middle !important;
      padding-top: 8px !important;
  }
  .labell {
      font-size: 1em;
      font-weight: bold;
      border-right: 1px dotted lightgray !Important;
  }
  ul {
      list-style-type: none;
  }
  .checkbox input {
      padding-top: 0px !important;
      background: lightblue !important;
  }
  .green-stripe, .red-stripe{
      width: 90px !important;
      min-width: 90px !important;
  }
   td{
       vertical-align: middle !important;
   }
   h4{
       width: 380px;
       background-color: darkseagreen;
       border: 1px dotted;
       margin-top: 0px;
       padding: 5px;
       opacity: 0.9;
       font-size: 1.2em;
   }

   #measure-table{
       margin-top: 8px;
       margin-bottom: 15px;
       display: table;
       width: 98%;
       padding-top: 10px !important;
   }
  #measure-table .table-row{
      display: table-row;
      table-layout:fixed;
  }

  #measure-table .td{
      display: table-cell;
      text-align: center;
  }

  #measure-table input{
      max-width: 600px !important;
      margin: 0px !important;
  }



   #measure-table td{
       border: 0.5px solid lightgray;
   }

   .data{
       padding-top: 5px !important;
       vertical-align: top !important;
   }

   #popup .table td{
       padding: 3px !important;
   }
   .add-button{
       font-size: 0.85em;
    }
    body, #popup{
     font-family: "Palatino Linotype", "Book Antiqua", Palatino, serif !important;
    }
    .numeric-row input,  .numeric-row select{
        width: 60px !important;
    }
    .header td{
        width: 60px !important;
        font-size: 12px;
        background: lightgray;
        border: 1px dotted white !important;
        text-align: center;
    }
    .numeric-row select{
        margin-top: 5px !important;
    }
    .unit-td {
       padding-top: 33.5px !important;
    }
    .danger-col, .warning-col{
        width: 90px !important;
    }
    #data-container{
        height: 78%;
        overflow: auto;
    }
    #sample_1 th{
        display: none !important;
    }
</style>
</head>
<body>

<form id = "popup">
  <table style="width:700px;height:700px;">
    <tr >
        <th id="popup-header">
         Header
        </th>
    </tr>
    <tr>
        <td id="content">
          <div id="popup-content">

          </div>
        </td>
    </tr>
    <tr>
      <td id="popup-footer">
        <a id="btn-save" style="width:12%" class="btn btn-success pull-right" href="javascript:save();">Save</a>
        <a style="width:12%" class="btn btn-danger pull-left" href="javascript:cancel();">Cancel</a>
      </td>
    </tr>
   </table>

</form>

<form>
<div id="mainPage" class="page" style='width:85%;'>
  <h3> <%= params[:title]%> </h3>
  <p style="text-align: right;">
    <a href="" rel="facebox">Page Help</a>
  </p>

 <table style="width: 100%;"><tr>
   <td style="width:85%;">
          <a class="btn btn-primary" type='button warning' href="javascript:buildEditPopup(-1)">
            Add New Test Type
          </a>
   </td>

   <td >
            <input onchange="" id='text' type="text" value="<%= params[:search_string]%>" class="form-control" placeholder="Search for...">
   </td>
   <td style="padding-bottom: 10px;">
             <button onclick="search()" class="btn btn-default" type="button">Go!</button>
   </td>
 </tr>
 <table id = 'h-th' style="width: 100%;" class="table table-striped table-condensed table-bordered table-hover">
 <tr>
   <th>#</th>
   <th >Test</th>
   <th >Lab Section</th>
   <th>Actions</th>
   <th>&nbsp;</th>
 </tr>
 </table>
 </table>
<div id="data-container">
<%= @data.html_safe%>
</div>
</div>
  </form>
<div id="shield">
</div>

</body>
<script>

    var disabled = {};
    <% @disabledTests.each do |key, value| %>
        disabled['<%= key%>'] = '<%= value%>';
    <% end %>

    var globalMeasures = {};
    var greens = document.getElementsByClassName("green-stripe");
    var reds = document.getElementsByClassName("red-stripe");

    for(var i in greens){
        greens[i].className += " btn-warning";
        try {
            var link = greens[i].getAttribute("href");
            greens[i].setAttribute("tid", link.match(/\d+$/));
            greens[i].parentNode.className += "warning-col";
            greens[i].onclick = function () {
                buildEditPopup(this.getAttribute("tid"));
            }
            greens[i].removeAttribute("href");
        }catch(e){}

    }

    for(var i in reds){
        reds[i].className += " btn-danger";
        try {
            var link = reds[i].getAttribute("href");
            reds[i].setAttribute("tid", link.match(/\d+$/));
            reds[i].parentNode.className += "danger-col";
            reds[i].innerHTML = "Disable";

            if(disabled[reds[i].getAttribute("tid")] == 1) {
                reds[i].className += " gray";
                reds[i].onclick = function(){
                    enableTest(this.getAttribute("tid"));
                }
            }else{
                reds[i].onclick = function(){
                    disableTest(this.getAttribute("tid"));
                }
            }

            reds[i].removeAttribute("href");
        }catch(e){}

    }

    var frow = __$("sample_1").getElementsByTagName('tr')[1].getElementsByTagName("td");
    var hrow = __$("h-th").getElementsByTagName("th");

    for(var i =0 ; i < frow.length; i ++){
        $(hrow[i]).css("width", $(frow[i]).width())
    }

    function disableTest(tid){
        changeActiveStatus(tid, 1);
    }

    function enableTest(tid){
        changeActiveStatus(tid, 0);
    }

    function changeActiveStatus(tid, enable){
        jQuery.ajax({url: "test_type_disable?tid="+tid + "&enable="+enable,
                     success: function(result){
                            result = JSON.parse(result);
                            window.location = "/config/test_types?title=Test Types";
                        }
                    }
        ).fail(function(xhr, status, error){
            alert(error);
        });

    }

    function buildEditPopup(tid) {

        if (tid)
            __$("popup").setAttribute("tid", tid);
        else
            __$("popup").removeAttribute("tid");


        jQuery.ajax({url: "test_type_edit_popup?tid="+tid,
                    success: function (response) {
                        response = JSON.parse(response);
                        display("Edit Test Type", true);
                        var details = document.createElement("div");
                        details.style.width = "100%";
                        details.innerHTML = response['test_type_input_info'];
                        __$("popup-content").appendChild(details);
                        var specimen_types = document.createElement("div");
                        specimen_types.style.width = "100%";
                        specimen_types.innerHTML = "<h4>Compatible Specimens</h4>" + response["compatible_specimens"];
                        __$("popup-content").appendChild(specimen_types);

                        var measures = document.createElement("div");
                        measures.style,width = "100%";
                        measures.innerHTML = "<h4>Measures</h4>";
                        globalMeasures = response['measures_data'];
                        measures.appendChild(getMeasuresTable(response['measures_data']));

                        __$("popup-content").appendChild(measures);
                        var addGlobal = document.createElement("a");
                        addGlobal.innerHTML = "Add Another";
                        addGlobal.className = "add-button";
                        __$("popup-content").appendChild(addGlobal);
                        addGlobal.onclick = function(){
                            blankMeasure();
                        }
                    }
                }
        ).fail(function(xhr, status, error){
                    alert(error);
                });
    }

    function __$(id){
        return document.getElementById(id);
    }

    function loadValidations(){
        var nodes = $("#popup input, #popup textarea, #popup select")
        for (var i = 0; i < nodes.length; i ++){
            $(nodes[i]).attr("name", ("temp_" + i));
        }

        $(".stype_entry").attr("name", 'stype');
        $(".stype_entry").attr({
            'name': 'stype',
            'required': true
        })

        $(".min, .max, .unit, .name, .list-node, .gender, #t_name, #loinc, .age_min, .age_max").attr("required", true);

        $(".min, .max, .age_min, .age_max").attr("number", true);

        $("#t_name, #loinc").attr({
           'minLength': 2
        })

        $(".age_min").attr({
            'min': 0,
            'max': 120
        })

        $(".age_max").attr({
            'min': 1,
            'max': 120
        })

        var form = $( "#popup" );

        form.validate();

        return form.valid();
    }

    function search(){

        $('#sample_1 tr:contains("' + __$('text').value + '")').show();
        $('#sample_1 tr:not(:contains("' + __$('text').value + '"))').css("display", "none");
    }

    function  cancel(){
        hidePopup();
    }

    function save(){

        var valid = loadValidations();

        if(valid) {
            params = buildParams();
            params['post_type'] = "test_type";

            var post_url = 'post_data';

            jQuery.ajax({url: post_url,
                        type: "POST",
                        data: params,
                        success: function (response) {
                            window.location = '/config/test_types?title=Test Types';
                        }
                    }
            ).fail(function(xhr, status, error){
                        alert(error);
                    });

        }
    }

    function display(headerTitle, showSave){

        __$("shield").style.display = "table-cell";
        __$("popup").style.display = "table-cell";
        __$("popup-header").innerHTML = headerTitle;

        if (showSave == true){
            __$("btn-save").style.display = "block";
        }else{
            __$("btn-save").style.display = "none";
        }
    }
    function hidePopup(){

        __$("shield").style.display = "none";
        __$("popup").style.display = "none";
        __$("popup-header").innerHTML = "";
        __$("popup-content").innerHTML = "";
    }

    function post(userId){

        var params = {};
        params["userId"] = userId;
        var requiredFields = ['username', 'actualName', 'password', 'level', 'labSection', 'email', 'phone', 'canverify'];

        for( var i = 0; i < requiredFields.length; i++) {
            var value = "";
            if (requiredFields[i] == 'labSection') {

                value = [];
                var nodes = document.getElementsByClassName("lab-section-checkbox");
                for (var j = 0; j < nodes.length; j++){
                    if (nodes[j].checked){
                        value.push(nodes[j].value);
                    }
                }
                value = value.join(',');
            }else if (requiredFields[i] == 'canverify'){
                value =  __$(requiredFields[i]).checked ? 1 : 0;
            }else{
                value = __$(requiredFields[i]).value;
            }

            params[requiredFields[i]] = value;
        }

        var post_url = 'post_data';

        jQuery.ajax({url: post_url,
                    type: "POST",
                    data: params,
                    success: function (response) {
                        window.location = '/config/user_accounts?title=User Accounts';
                    }
                }
        ).fail(function(xhr, status, error){
                    alert(error);
        });
    }

    function check_if_new_category(select_obj)
    {
        var value = $('#cat_code').val();
        if(value == -1)
        {
            $('#new_category').show();
        }
        else
        {
            $('#new_category_textbox').val("");
            $('#new_category').hide();
        }
    }

    function blankMeasure(){
        var measure = {};
        var table = __$("measure-table");
        var msr = document.createElement("tr");
        msr.className = "table-row new-measure";
        table.appendChild(msr);

        var cols = [
            ["delete", "checkbox"],
            ["name", "text"],
            ["type", "dropdown"],
            ["values", "dynamic"],
            ["unit", "text"]
        ];

        for (var i in cols) {

            var node = document.createElement("td");

            node.className = "td data data-" + (parseInt(i) + 1);

            switch (cols[i][0]) {
                case 'delete':

                    var inp = document.createElement("input");
                    inp.className = "delete";
                    inp.setAttribute("type", cols[i][1]);
                    inp.style.width = "50px";
                    node.appendChild(inp);
                    break;
                case 'name':

                    var inp = document.createElement("input");
                    inp.className = "name name_"
                    inp.setAttribute("type", cols[i][1]);
                    inp.style.width = "105px";
                    node.appendChild(inp);
                    break;
                case 'type':

                    var inp = document.createElement("select");
                    inp.id = "select_"
                    inp.className = "select";
                    var options = [["Numeric Range", 'numeric'], ["Alphanumeric Values", 'options'], ["Freetext", 'freetext']]

                    for (var k in options){

                        var opt = document.createElement("option");
                        opt.setAttribute("value", options[k][1]);
                        opt.innerHTML = options[k][0];

                        inp.appendChild(opt);
                    }

                    inp.style.width = "100px";
                    node.appendChild(inp);

                    inp.onchange =  function(){

                            var node = this.parentNode.parentNode.getElementsByClassName("values")[0]//[0];
                            node.innerHTML = "";

                            var unit = node.parentNode.getElementsByClassName("unit")[0]
                            unit.value = "";
                            jQuery(unit).hide();

                            if (this.value == "numeric"){
                                var table2 = document.createElement("table");
                                table2.className = "numeric-table";
                                node.appendChild(table2);
                                jQuery(unit).show();

                                var addButton = document.createElement("a");
                                addButton.className = "add-button";
                                addButton.innerHTML = "<br /><span>Add Another<span>";
                                addButton.onclick = function(){
                                    var input = document.createElement("input");
                                    input.style.width = "40%";
                                    var new_row = createRow('0', 'numeric-row', ['range', 'gender', 'age_range'], {});

                                    this.parentNode.getElementsByClassName("numeric-table")[0].appendChild(new_row);
                                }

                                node.appendChild(addButton);

                                var row = createRow("-1", 'header', [], {});
                                table2.appendChild(row);

                                addButton.click();
                            }else if(this.value == "options"){

                                var addButton = document.createElement("a");
                                addButton.className = "add-button";
                                addButton.innerHTML = "<br /><span>Add Another<span>";
                                addButton.onclick = function(){
                                    var input = document.createElement("input");
                                    input.style.width = "40%";
                                    input.className = "list-node";
                                    this.parentNode.insertBefore(input, this);
                                    this.parentNode.insertBefore(document.createTextNode(" / "), this);
                                }

                                node.appendChild(addButton);
                                addButton.click();
                            }
                    }

                    break;
                case 'values':

                    node.id = "values_";
                    node.className = " values";

                    var table2 = document.createElement("table");
                    table2.className = "numeric-table";
                    node.appendChild(table2);

                    var addButton = document.createElement("a");
                    addButton.className = "add-button";
                    addButton.innerHTML = "<br /><span>Add Another<span>";
                    addButton.onclick = function(){
                        var input = document.createElement("input");
                        input.style.width = "40%";
                        var new_row = createRow('0', 'numeric-row', ['range', 'gender', 'age_range'], {});

                        this.parentNode.getElementsByClassName("numeric-table")[0].appendChild(new_row);
                    }

                    node.appendChild(addButton);

                    var row = createRow("-1", 'header', [], {});
                    table2.appendChild(row);

                    addButton.click();

                    break;
                case 'unit':

                    node.id = "unit_";
                    node.className += " unit-td"
                    var inp = document.createElement("input");
                    inp.className = "unit unit_";
                    inp.setAttribute("type", cols[i][1]);
                    inp.style.width = "90px";
                    node.appendChild(inp);
                    break;
            }

            msr.appendChild(node);
        }

    }

    function getMeasuresTable(data){

        if (data){
            var table = document.createElement('table');
            table.id = "measure-table";

            //****** build header ***********
            var header = document.createElement("tr");
            header.className = "table-row";
            table.appendChild(header);

            var headerData = ["Delete", "Name", "Type", "Values", "Unit"]

            for (var i in headerData){
                var node = document.createElement("td");
                node.innerHTML = headerData[i];
                node.className = "td td-" + (parseInt(i) + 1);
                header.appendChild(node);
            }

            //****** build contents *******


            for (var j in data) {

                var measure = data[j];
                var msr = document.createElement("tr");
                msr.className = "table-row old-measure";
                msr.id = measure["measure"]["measureId"];
                table.appendChild(msr);

                var cols = [
                    ["delete", "checkbox"],
                    ["name", "text"],
                    ["type", "dropdown"],
                    ["values", "dynamic"],
                    ["unit", "text"]
                ];

                for (var i in cols) {

                    var node = document.createElement("td");

                    node.className = "td data data-" + (parseInt(i) + 1);

                    switch (cols[i][0]) {
                        case 'delete':

                            node.id = "delete_" + measure["measure"]["measureId"];
                            var inp = document.createElement("input");
                            inp.className = "delete";
                            inp.setAttribute("type", cols[i][1]);
                            inp.style.width = "50px";
                            node.appendChild(inp);
                            break;
                        case 'name':

                            node.id = "name_" + measure["measure"]["measureId"];

                            var inp = document.createElement("input");
                            inp.className = "name name_" + measure["measure"]["measureId"];
                            inp.setAttribute("type", cols[i][1]);
                            inp.style.width = "105px";
                            inp.value = measure["measure"]["name"];
                            node.appendChild(inp);
                            break;
                        case 'type':

                            node.id = "types_" + measure["measure"]["measureId"];
                            var inp = document.createElement("select");
                            inp.className = "select";
                            inp.id = "select_" + measure["measure"]["measureId"];
                            var options = [["Numeric Range", 'numeric'], ["Alphanumeric Values", 'options'], ["Freetext", 'freetext']]

                            for (var k in options){

                                var opt = document.createElement("option");
                                opt.setAttribute("value", options[k][1]);
                                opt.innerHTML = options[k][0];
                                if (measure["range_type"] == options[k][1]) {
                                    opt.selected = true;
                                    opt.setAttribute("class", "default");
                                }

                                inp.appendChild(opt);
                            }

                            inp.style.width = "100px";
                            inp.setAttribute("measure_id", measure["measure"]["measureId"]);
                            node.appendChild(inp);

                            inp.onchange =  function(){

                                var df = this.getElementsByClassName("default")[0];
                                var node = __$("values_"+this.getAttribute("measure_id"));
                                node.innerHTML = "";

                                if (this.value == df.getAttribute("value")) {
                                    var measure = globalMeasures[this.getAttribute("measure_id")];

                                    if (this.value == "numeric"){
                                        createNumerics(measure, node);
                                    }else if (this.value == "options"){
                                        createList(measure, node);
                                    }
                                }else{

                                    var unit = node.parentNode.getElementsByClassName("unit")[0]
                                    unit.value = "";
                                    jQuery(unit).hide();

                                    if (this.value == "numeric"){
                                        var table2 = document.createElement("table");
                                        table2.className = "numeric-table";
                                        node.appendChild(table2);
                                        jQuery(unit).show();

                                        var addButton = document.createElement("a");
                                        addButton.className = "add-button";
                                        addButton.id = "add_" + this.getAttribute("measure_id");

                                        addButton.innerHTML = "<br /><span>Add Another<span>";
                                        addButton.onclick = function(){
                                            var input = document.createElement("input");
                                            input.style.width = "40%";
                                            var new_row = createRow('0', 'numeric-row', ['range', 'gender', 'age_range'], {});

                                            this.parentNode.getElementsByClassName("numeric-table")[0].appendChild(new_row);
                                        }

                                        node.appendChild(addButton);

                                        var row = createRow("-1", 'header', [], {});
                                        table2.appendChild(row);

                                        addButton.click();
                                    }else if(this.value == "options"){

                                        var addButton = document.createElement("a");
                                        addButton.className = "add-button";
                                        addButton.id = "add_" + this.getAttribute("measure_id");
                                        addButton.innerHTML = "<br /><span>Add Another<span>";
                                        addButton.onclick = function(){
                                            var input = document.createElement("input");
                                            input.style.width = "40%";
                                            this.parentNode.insertBefore(input, this);
                                            this.parentNode.insertBefore(document.createTextNode(" / "), this);
                                        }

                                        node.appendChild(addButton);
                                        addButton.click();
                                    }
                                }
                            }

                            break;
                        case 'values':

                            node.id = "values_" + measure["measure"]["measureId"];
                            if (measure["range_type"] == "numeric"){

                                createNumerics(measure, node);
                            }else if (measure["range_type"] == "freetext"){

                              //Leave blank
                            }else if (measure["range_type"] == "options"){

                                createList(measure, node);
                            }

                            break;
                        case 'unit':

                            node.id = "unit_" + measure["measure"]["measureId"];
                            node.className += " unit-td";
                            var inp = document.createElement("input");
                            inp.className = "unit unit_" + measure["measure"]["measureId"];
                            inp.setAttribute("type", cols[i][1]);
                            inp.style.width = "90px";
                            inp.value = measure["measure"]["unit"];
                            node.appendChild(inp);

                            if(measure["range_type"] != "numeric"){
                                jQuery(inp).hide();
                            }

                            break;
                    }

                    msr.appendChild(node);
                }
            }

            return table;
        }
    }

    function createList(measure, node){

        for(var n in measure["range_values"]){
            var input = document.createElement("input");
            input.setAttribute("value", measure["range_values"][n]);
            input.className = "list-node";
            input.style.width = "40%";
            node.appendChild(input);
            node.innerHTML += " / ";
        }

        var addButton = document.createElement("a");
        addButton.className = "add-button";
        addButton.id = "add_" + measure["measure"]["measureId"];
        addButton.innerHTML = "<br /><span>Add Another<span>";
        addButton.onclick = function(){
            var input = document.createElement("input");
            input.style.width = "40%";
            input.className = "list-node";

            this.parentNode.insertBefore(input, this);
            this.parentNode.insertBefore(document.createTextNode(" / "), this);
        }

        node.appendChild(addButton);
    }

    function createNumerics(measure, node){

        var table2 = document.createElement("table");
        table2.className = "numeric-table";
        node.appendChild(table2);

        if (node.parentNode) {
            var unit = node.parentNode.getElementsByClassName("unit");
            if (unit.length > 0) {
                unit[0].value = measure["measure"]["unit"];
                jQuery(unit).show();
            }
        }

        var addButton = document.createElement("a");
        addButton.className = "add-button";
        addButton.id = "add_" + measure["measure"]["measureId"];
        addButton.innerHTML = "<br /><span>Add Another<span>";
        addButton.onclick = function(){
            var input = document.createElement("input");
            input.style.width = "40%";
            var new_row = createRow('0', 'numeric-row', ['range', 'gender', 'age_range'], {});
            this.parentNode.childNodes[0].appendChild(new_row);
        }

        node.appendChild(addButton);

        var row = createRow("-1", 'header', [], {});
        table2.appendChild(row);

        for(var n in measure["ref_ranges"]){
            var row = createRow(measure["ref_ranges"][n]["id"], 'numeric-row', ['range', 'gender', 'age_range'], measure["ref_ranges"][n]);
            table2.appendChild(row);
        }

        return table2;
    }

 function createRow(pos, clas, options, data){
     if (parseInt(pos) >= -1){
         var row = document.createElement("tr")
         row.className = clas;
         row.id = "numeric_row_"+pos;

         if (clas == 'header'){

             row.className += " header";

             var td = document.createElement("td");
             td.innerHTML = "<span>Min</span>";
             row.appendChild(td);

             var td = document.createElement("td");
             td.innerHTML = "<span>Max</span>";
             row.appendChild(td);

             var td = document.createElement("td");
             td.innerHTML = "<span>Gender</span>";
             row.appendChild(td);

             var td = document.createElement("td");
             td.innerHTML = "<span>Min Age</span>";
             row.appendChild(td);

             var td = document.createElement("td");
             td.innerHTML = "<span>Max Age</span>";
             row.appendChild(td);

             return row;
         }

         if (data["id"])
            row.setAttribute("range_id", data["id"]);

         for (var i = 0; i < options.length; i ++){
             if (options[i] == 'range'){

                 var td = document.createElement("td");
                 row.appendChild(td);

                 var input1 = document.createElement("input");
                 input1.className = "min";

                 if (data["rangeLower"])
                 input1.value = data["rangeLower"];
                 td.appendChild(input1);

                 var td = document.createElement("td");
                 row.appendChild(td);

                 var input2 = document.createElement("input");
                 input2.className = "max";

                 if(data["rangeUpper"])
                    input2.value = data["rangeUpper"];
                 td.appendChild(input2);
             }else if(options[i] == "gender"){

                 var td = document.createElement("td");
                 row.appendChild(td);

                 var sel = document.createElement("select");
                 sel.className = "gender";
                 td.appendChild(sel);

                 var dt = [["Both", "B"], ["Male", "M"], ["Female", "F"]];

                 for (var k in dt){

                     var od = document.createElement("option");
                     od.setAttribute("value", dt[k][1]);
                     if(dt[k][1] == data["sex"])
                        od.selected = true;
                     od.innerHTML = dt[k][0];
                     sel.appendChild(od);
                 }
             }else if(options[i] == "age_range"){

                 var td = document.createElement("td");
                 row.appendChild(td);

                 var input1 = document.createElement("input");
                 input1.className = "age_min";

                 if(data["ageMin"])
                    input1.value = data["ageMin"];
                 td.appendChild(input1);

                 var td = document.createElement("td");
                 row.appendChild(td);

                 var input2 = document.createElement("input");
                 input2.className = "age_max";

                 if(data["ageMax"])
                    input2.value = data["ageMax"];
                 td.appendChild(input2);
             }
         }
     }
     return row;
 }

function buildParams(){

    var data = {};
    var popup = __$("popup")

    data["tid"] = popup.getAttribute("tid");
    data["cat_code"] = __$("cat_code").value.trim();
    data["t_name"] = __$("t_name").value.trim();
    data["desc"] = __$("desc").value.trim();
    data["hide_name"] = __$("name_hide").value.trim();
    data['loinc_code'] = __$('loinc').value.trim();
    data['qty'] = __$('qty').value.trim();
    data['s_unit'] = __$('s_unit').value.trim();

    var specimen_nodes = jQuery(".stype_entry:checked");
    data["specimen_types"] = [];
    for (var i = 0; i < specimen_nodes.length; i++){
        data["specimen_types"].push(specimen_nodes[i].value);
    }

    data["measures"] = {};
    data["measures"]["delete"] = [];
    data["measures"]["update"] = [];
    data["measures"]["add"] = [];
    data["measures"]["link"] = [];

    var to_delete = jQuery(".delete:checked");
    for (var i = 0; i < to_delete.length; i ++){

        var m_id = to_delete[i].parentNode.parentNode.id;
        if(m_id && parseInt(m_id) > 0) {
            data["measures"]["delete"].push(m_id);
        }
    }

    var to_update = jQuery(".old-measure");
    data = extractValues(to_update, data, "update");
    var to_add = jQuery(".new-measure");
    data = extractValues(to_add, data, "add");

    return data;
}

function extractValues(nodes, data, key){

    for (var i = 0; i < nodes.length; i ++){
        var msr = {}
        if(jQuery(nodes[i]).find(".delete:checked").length > 0){
            continue;
        }else{

            msr["id"] = nodes[i].id;

            var name = jQuery(nodes[i]).find(".name")[0].value;
            msr["name"] = name;

            var range_type = jQuery(nodes[i]).find(".select")[0].value;
            msr["range_type"] = range_type;

            if (range_type == "options"){

                var range_nodes = jQuery(nodes[i]).find(".list-node");
                var range_values = [];

                for(var  j = 0; j < range_nodes.length; j ++){
                    if (range_nodes[j].value && range_nodes[j].value != "")
                        range_values.push(range_nodes[j].value);
                }
                msr["range_values"] = range_values;
            }else if (range_type == "numeric"){

                var nrows = jQuery(nodes[i]).find(".numeric-row");
                var ref_ranges = [];
                for(var j = 0; j < nrows.length; j++){

                    var range = {};
                    if(nrows[j].getAttribute("range_id"))
                        range["range_id"] = nrows[j].getAttribute("range_id");
                    var nnodes = jQuery(nrows[j]).find("td");

                    for (var k = 0; k < nnodes.length; k ++){
                        range[nnodes[k].childNodes[0].className] = nnodes[k].childNodes[0].value;
                    }
                    ref_ranges.push(range);
                }

                var unit = jQuery(nodes[i]).find(".unit")[0].value;
                msr["unit"] = unit;
                msr["ref_ranges"] = ref_ranges;
            }else{

            }
        }
        data["measures"][key].push(msr);
    }
    return data;
}

    jQuery.validator.setDefaults({
        debug: true,
        success: "valid"
    });

    jQuery.expr[':'].iContains = function(a, i, m) {
        return jQuery(a).text().toUpperCase()
                .indexOf(m[3].toUpperCase()) >= 0;
    };

</script>
</html>
